{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","quote","setQuote","author","setAuthor","fetchQuote","fetch","then","response","json","newQuote","$","slideUp","slideDown","tweetUrl","Promise","resolve","catch","error","console","log","output","tweetQuery","concat","replace","attr","window","onload","id","onClick","icon","faQuoteLeft","href","faTwitter","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAiFeA,MA1Ef,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,eAFxB,mBAENG,EAFM,KAEEC,EAFF,KAIPC,EAAa,WASjBC,MAAM,sDACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACE,GACL,IAAMC,EAAWD,EAAK,GActB,OAXAE,IAAE,SAASC,QAAQ,KACf,WACEV,EAASQ,GAZmCN,EAAhB,gBAAXD,EAAqC,mBAAgC,kBAevFU,UAAU,KAEfC,EAASJ,GAIFK,QAAQC,QAAQN,MAExBO,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,OAG5BJ,EAAW,SAACO,GAChB,IAGMC,EAAaD,EAChBE,OAHa,kBAIbC,QAHW,OAGI,OAGlBb,IAAE,gBAAgBc,KAAK,OARJ,yCAQuBF,OAAOD,KAMnD,OAFAI,OAAOC,OAAStB,EAGd,yBAAKuB,GAAG,aACN,uBAAGA,GAAG,UAAN,sBACA,uBAAGA,GAAG,QAAQ3B,GAEd,uBAAG2B,GAAG,UAAUzB,GAChB,4BACEyB,GAAG,YACHC,QAASxB,GACP,kBAAC,IAAD,CAAiByB,KAAMC,MAH3B,aAMA,uBACEH,GAAG,cACHI,KAAK,qCACH,kBAAC,IAAD,CAAiBF,KAAMG,MAH3B,WC3DcC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.e762ad46.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.scss';\nimport $ from 'jquery';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\n\nfunction App() {\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('Ron Swanson')\n\n  const fetchQuote = () => {\n    //See GitHub for API documentation\n    //https://github.com/jamesseanwright/ron-swanson-quotes\n\n    //The freeCodeCamp unit tests require that the author be different\n    //on each #new-quote press. Since I have only one author, this function\n    //updates the state in a hidden dom element to pass the unit test \n    const toggleAuthor = () => author === 'Ron Swanson' ? setAuthor('Also Ron Swanson') : setAuthor('Ron Swanson')\n\n    fetch('https://ron-swanson-quotes.herokuapp.com/v2/quotes')\n      .then((response) => {\n        return response.json();\n      })\n      .then((json) => {\n        const newQuote = json[0];\n\n        //Completes initial animation, updates state, starts exit animation\n        $('#text').slideUp(600, \n            () => {\n              setQuote(newQuote)\n              toggleAuthor()\n            })\n            .slideDown(800);\n        \n        tweetUrl(newQuote);\n        \n        //Does not update state but ensures\n        //that User Story #8 unit test passes\n        return Promise.resolve(newQuote);\n      })\n      .catch((error) => console.log(error));\n  }\n\n  const tweetUrl = (output) => {\n    const twitterUrl = 'http://twitter.com/intent/tweet/?text=';\n    const tagLine = ' - Ron Swanson'\n    const regex = /\\s/gi;\n    const tweetQuery = output\n      .concat(tagLine)\n      .replace(regex, '%20');\n\n    //Update the tweet button with new quote\n    $('#tweet-quote').attr(\"href\", twitterUrl.concat(tweetQuery));\n  }\n\n  //Fetches first quote on load\n  window.onload = fetchQuote;\n\n  return (\n    <div id=\"quote-box\">\n      <p id=\"header\">Ron Swanson Quotes</p>\n      <p id=\"text\">{quote}</p>\n      {/* #author is hidden due to there being one author */}\n      <p id=\"author\">{author}</p>\n      <button \n        id=\"new-quote\" \n        onClick={fetchQuote}>\n          <FontAwesomeIcon icon={faQuoteLeft} />\n          New Quote\n      </button>\n      <a \n        id=\"tweet-quote\"\n        href=\"https://twitter.com/intent/tweet/\">\n          <FontAwesomeIcon icon={faTwitter} />\n          Tweet\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}